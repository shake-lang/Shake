# This script converts the output of the gradle build task into a SARIF file
# that can be uploaded to GitHub code scanning alerts or other tools that
# support SARIF format.
#
# Usage:
# python3 convert_gradle_output.py <path to the gradle build output file>
#
# To get the output of the gradle build task, run the following command:
# ./python3 run_gradlew.py <task / gradle arguments>
#
import json
from os.path import relpath
from os import getcwd
import sys

def create_sarif_result(file_path, line_number, column_number, message):
    return {
        'ruleId': 'KotlinCompilerWarning',
        'level': 'warning',
        'message': {
            'text': message
        },
        'locations': [{
            'physicalLocation': {
                'artifactLocation': {
                    'uri': file_path
                },
                'region': {
                    'startLine': line_number,
                    'startColumn': column_number
                }
            }
        }]
    }


def parse_compiler_output(compiler_output_file):
    results = []

    with open(compiler_output_file, 'r') as file:
        for line in file:
            if line.startswith("w: "):
                warning = line[3:]
                a, url, line_number, rest = warning.split(":", 3)
                column_number, message = rest.split(" ", 1)
                file_path = relpath(url[1:], getcwd())
                line_number = int(line_number)
                column_number = int(column_number)
                results.append(create_sarif_result(file_path, line_number, column_number, message[:-1]))

    return results


def generate_sarif(results):
    sarif = {
        'version': '2.1.0',
        "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
        'runs': [{
            'tool': {
                'driver': {
                    "downloadUri": "https://kotlinlang.org/",
                    "fullName": "detekt",
                    "guid": "6cdf5696-da8a-4131-a3f6-9ec74137da04",
                    "language": "en",
                    "organization": "detekt",
                    'name': 'Kotlin Compiler',
                    'informationUri': 'https://kotlinlang.org/',
                    'version': '1.9.23',
                    'semanticVersion': '1.9.23',
                    'rules': [{
                        'id': 'KotlinCompilerWarning',
                        'shortDescription': {
                            'text': 'Kotlin compiler warning'
                        },
                        'properties': {
                            'tags': ['security', 'performance', 'correctness']
                        },
                        'fullDescription': {
                            'text': 'A warning generated by the Kotlin compiler during compilation.'
                        },
                    }]
                }
            },
            'results': results
        }]
    }

    return sarif


def main():
    if len(sys.argv) != 2:
        print("Usage: python convert_to_sarif.py <compiler_output_file>")
        sys.exit(1)

    compiler_output_file = sys.argv[1]
    results = parse_compiler_output(compiler_output_file)
    sarif = generate_sarif(results)

    print(json.dumps(sarif, indent=2))


if __name__ == "__main__":
    main()
