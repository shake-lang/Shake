package io.github.shakelang.shake.lexer

import io.github.shakelang.shake.lexer.token.ShakeTokenType
import io.github.shakelang.shake.util.parseutils.characters.streaming.CharacterInputStream
import io.github.shakelang.shake.util.parseutils.characters.streaming.SourceCharacterInputStream
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertSame

class TokenPosition {

    @Test
    @Suppress("deprecation")
    fun testGetBasicPosition() {
        val chars: CharacterInputStream = SourceCharacterInputStream("<tests>", "int test = 10;")
        val lexer = ShakeLexer(chars)
        val input = lexer.makeTokens()
        assertSame(ShakeTokenType.KEYWORD_INT, input.peek().type)
        assertSame(null, input.peek().value)
        var start = input.map.resolve(input.peek().start)
        var end = input.map.resolve(input.peek().end)
        assertSame(0, start.index)
        assertSame(1, start.column)
        assertSame(1, start.line)
        assertSame(2, end.index)
        assertSame(3, end.column)
        assertSame(1, end.line)
        input.skip()
        assertSame(ShakeTokenType.IDENTIFIER, input.peek().type)
        assertEquals("test", input.peek().value)
        start = input.map.resolve(input.peek().start)
        end = input.map.resolve(input.peek().end)
        assertSame(4, start.index)
        assertSame(5, start.column)
        assertSame(1, start.line)
        assertSame(7, end.index)
        assertSame(8, end.column)
        assertSame(1, end.line)
        input.skip()
        assertSame(ShakeTokenType.ASSIGN, input.peek().type)
        assertSame(null, input.peek().value)
        start = input.map.resolve(input.peek().start)
        end = input.map.resolve(input.peek().end)
        assertSame(9, start.index)
        assertSame(10, start.column)
        assertSame(1, start.line)
        assertSame(9, end.index)
        assertSame(10, end.column)
        assertSame(1, end.line)
        input.skip()
        assertSame(ShakeTokenType.INTEGER, input.peek().type)
        assertEquals("10", input.peek().value)
        start = input.map.resolve(input.peek().start)
        end = input.map.resolve(input.peek().end)
        assertSame(11, start.index)
        assertSame(12, start.column)
        assertSame(1, start.line)
        assertSame(12, end.index)
        assertSame(13, end.column)
        assertSame(1, end.line)
        input.skip()
        assertSame(ShakeTokenType.SEMICOLON, input.peek().type)
        assertSame(null, input.peek().value)
        start = input.map.resolve(input.peek().start)
        end = input.map.resolve(input.peek().end)
        assertSame(13, start.index)
        assertSame(14, start.column)
        assertSame(1, start.line)
        assertSame(13, end.index)
        assertSame(14, end.column)
        assertSame(1, end.line)
    }

    @Test
    fun testGetMultiLinePosition() {
        val chars: CharacterInputStream = SourceCharacterInputStream("<tests>", "int test\n  = \n10;")
        val lexer = ShakeLexer(chars)
        val input = lexer.makeTokens()
        assertSame(ShakeTokenType.KEYWORD_INT, input.peek().type)
        assertSame(null, input.peek().value)
        var start = input.map.resolve(input.peek().start)
        var end = input.map.resolve(input.peek().end)
        assertSame(0, start.index)
        assertSame(1, start.column)
        assertSame(1, start.line)
        assertSame(2, end.index)
        assertSame(3, end.column)
        assertSame(1, end.line)
        input.skip()
        assertSame(ShakeTokenType.IDENTIFIER, input.peek().type)
        assertEquals("test", input.peek().value)
        start = input.map.resolve(input.peek().start)
        end = input.map.resolve(input.peek().end)
        assertSame(4, start.index)
        assertSame(5, start.column)
        assertSame(1, start.line)
        assertSame(7, end.index)
        assertSame(8, end.column)
        assertSame(1, end.line)
        input.skip()
        assertSame(ShakeTokenType.LINE_SEPARATOR, input.peek().type)
        assertSame(null, input.peek().value)
        start = input.map.resolve(input.peek().start)
        end = input.map.resolve(input.peek().end)
        assertSame(8, start.index)
        assertSame(9, start.column)
        assertSame(1, start.line)
        assertSame(8, end.index)
        assertSame(9, end.column)
        assertSame(1, end.line)
        input.skip()
        assertSame(ShakeTokenType.ASSIGN, input.peek().type)
        assertSame(null, input.peek().value)
        start = input.map.resolve(input.peek().start)
        end = input.map.resolve(input.peek().end)
        assertSame(11, start.index)
        assertSame(3, start.column)
        assertSame(2, start.line)
        assertSame(11, end.index)
        assertSame(3, end.column)
        assertSame(2, end.line)
        input.skip()
        assertSame(ShakeTokenType.LINE_SEPARATOR, input.peek().type)
        assertSame(null, input.peek().value)
        start = input.map.resolve(input.peek().start)
        end = input.map.resolve(input.peek().end)
        assertSame(13, start.index)
        assertSame(5, start.column)
        assertSame(2, start.line)
        assertSame(13, end.index)
        assertSame(5, end.column)
        assertSame(2, end.line)
        input.skip()
        assertSame(ShakeTokenType.INTEGER, input.peek().type)
        assertEquals("10", input.peek().value)
        start = input.map.resolve(input.peek().start)
        end = input.map.resolve(input.peek().end)
        assertSame(14, start.index)
        assertSame(1, start.column)
        assertSame(3, start.line)
        assertSame(15, end.index)
        assertSame(2, end.column)
        assertSame(3, end.line)
        input.skip()
        assertSame(ShakeTokenType.SEMICOLON, input.peek().type)
        assertSame(null, input.peek().value)
        start = input.map.resolve(input.peek().start)
        end = input.map.resolve(input.peek().end)
        assertSame(16, start.index)
        assertSame(3, start.column)
        assertSame(3, start.line)
        assertSame(16, end.index)
        assertSame(3, end.column)
        assertSame(3, end.line)
    }
}
